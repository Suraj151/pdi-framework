/***************************** PDI STD File ***********************************
This file is taken from external sources. this is taken from open source uClibc++ 
library available on github. below is reference link. Thanking to author for
providing this .

This is free software. you can redistribute it and/or modify it but without any
warranty.

referred from   : https://github.com/mike-matera/ArduinoSTL
added Date      : 1st Dec 2024
added by        : Suraj I.
******************************************************************************/

#include "basic_definitions"
#include "deque"
#include "vector"
#include "functional"

#ifndef __HEADER_PDISTD_QUEUE
#define __HEADER_PDISTD_QUEUE 1

#pragma GCC visibility push(default)

namespace pdistd{
	
	template <class T, class Container = deque<T> > class _UCXXEXPORT queue{
	protected:
		Container c;
	public:
		typedef typename Container::value_type	value_type;
		typedef typename Container::size_type	size_type;
		typedef Container			container_type;

		explicit queue(const Container& a = Container()) : c(a) {  }

		bool empty() const		{ return c.empty(); }
		size_type size()  const		{ return c.size(); }
		value_type&       front()	{ return c.front(); }
		const value_type& front() const	{ return c.front(); }
		value_type&       back()	{ return c.back(); }
		const value_type& back() const	{ return c.back(); }
		void push(const value_type& x)	{ c.push_back(x); }
		void pop()			{ c.pop_front(); }
	};


	template <class T, class Container> _UCXXEXPORT bool
		operator==(const queue<T, Container>& x, const queue<T, Container>& y)
	{
		return (x.c == y.c);
	}
	template <class T, class Container> _UCXXEXPORT bool
		operator< (const queue<T, Container>& x, const queue<T, Container>& y)
	{
		return (x.c < y.c);
	}
	template <class T, class Container> _UCXXEXPORT bool
		operator!=(const queue<T, Container>& x, const queue<T, Container>& y)
	{
		return (x.c != y.c);
	}
	template <class T, class Container> _UCXXEXPORT bool
		operator> (const queue<T, Container>& x, const queue<T, Container>& y)
	{
		return (x.c > y.c);
	}
	template <class T, class Container> _UCXXEXPORT bool
		operator>=(const queue<T, Container>& x, const queue<T, Container>& y)
	{
		return (x.c >= y.c);
	}
	template <class T, class Container> _UCXXEXPORT bool
		operator<=(const queue<T, Container>& x, const queue<T, Container>& y)
	{
		return (x.c <= y.c);
	}


	template <class T,
		class Container = vector<T>,
		class Compare = less<typename Container::value_type>
	> class _UCXXEXPORT priority_queue {
	protected:
		Container c;
		Compare comp;
	public:
		typedef typename Container::value_type	value_type;
		typedef typename Container::size_type	size_type;
		typedef Container			container_type;

		explicit priority_queue(const Compare& x = Compare(), const Container& a = Container())
			: c(a), comp(x) { make_heap(c.begin(), c.end(), comp) ; }
		template <class InputIterator> priority_queue(InputIterator first,
			InputIterator last,
			const Compare& x = Compare(),
			const Container& y= Container())
		:  c(y), comp(c)
		{ 
			c.insert(c.end(), first, last);
			make_heap(c.begin(), c.end(), comp);
		 }

		bool empty() const       { return c.empty(); }
		size_type size()  const       { return c.size(); }
		const value_type& top() const { return c.front(); }
		void push(const value_type& x){
			c.push_back(x);
			push_heap(c.begin(), c.end(), comp);
		}
		void pop(){
			pop_heap(c.begin(), c.end(), comp);
			c.pop_back();
		}
	};

}

#pragma GCC visibility pop

#endif


